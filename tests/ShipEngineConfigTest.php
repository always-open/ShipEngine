<?php

namespace BluefynInternational\ShipEngine\Tests;

use BluefynInternational\ShipEngine\Message\ShipEngineException;
use BluefynInternational\ShipEngine\Message\TimeoutException;
use BluefynInternational\ShipEngine\Message\ValidationException;
use BluefynInternational\ShipEngine\ShipEngineConfig;
use DateInterval;
use Mockery;
use Orchestra\Testbench\TestCase as Orchestra;

/**
 * @covers \BluefynInternational\ShipEngine\ShipEngineConfig
 * @uses   \BluefynInternational\ShipEngine\Message\RateLimitExceededException
 * @uses   \BluefynInternational\ShipEngine\Util\Assert
 * @uses   \BluefynInternational\ShipEngine\ShipEngineConfig
 * @uses   \BluefynInternational\ShipEngine\Message\ShipEngineException
 * @uses   \BluefynInternational\ShipEngine\Message\ValidationException
 * @uses   \BluefynInternational\ShipEngine\ShipEngine
 * @uses   \BluefynInternational\ShipEngine\ShipEngineClient
 * @uses   \BluefynInternational\ShipEngine\Message\TimeoutException
 */
final class ShipEngineConfigTest extends Orchestra
{
    private static string $test_url;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::$test_url = ShipEngineConfig::getBaseUri();
    }

    public function tearDown(): void
    {
        Mockery::close();
    }

    public function testNoAPIKey(): void
    {
        try {
            new ShipEngineConfig(
                [
                    'baseUrl' => self::$test_url,
                    'pageSize' => 75,
                    'retries' => 7,
                    'timeout' => new DateInterval('PT15S'),
                    'events' => null,
                ]
            );
        } catch (ValidationException $e) {
            $error = $e->jsonSerialize();
            $this->assertInstanceOf(ValidationException::class, $e);
            $this->assertNull($error['requestId']);
            $this->assertEquals('shipengine', $error['source']);
            $this->assertEquals('validation', $error['type']);
            $this->assertEquals('field_value_required', $error['errorCode']);
            $this->assertEquals(
                'A ShipEngine API key must be specified.',
                $error['message']
            );
        }
    }

    public function testEmptyAPIKey(): void
    {
        try {
            new ShipEngineConfig(
                [
                    'apiKey' => '',
                    'baseUrl' => self::$test_url,
                    'pageSize' => 75,
                    'retries' => 7,
                    'timeout' => new DateInterval('PT15S'),
                    'events' => null,
                ]
            );
        } catch (ValidationException $e) {
            $error = $e->jsonSerialize();
            $this->assertInstanceOf(ValidationException::class, $e);
            $this->assertNull($error['requestId']);
            $this->assertEquals('shipengine', $error['source']);
            $this->assertEquals('validation', $error['type']);
            $this->assertEquals('field_value_required', $error['errorCode']);
            $this->assertEquals(
                'A ShipEngine API key must be specified.',
                $error['message']
            );
        }
    }

    public function testInvalidRetries(): void
    {
        try {
            new ShipEngineConfig(
                [
                    'apiKey' => 'baz',
                    'baseUrl' => self::$test_url,
                    'pageSize' => 75,
                    'retries' => -7,
                    'timeout' => new DateInterval('PT15S'),
                    'events' => null,
                ]
            );
        } catch (ValidationException $e) {
            $error = $e->jsonSerialize();
            $this->assertInstanceOf(ValidationException::class, $e);
            $this->assertNull($error['requestId']);
            $this->assertEquals('shipengine', $error['source']);
            $this->assertEquals('validation', $error['type']);
            $this->assertEquals('invalid_field_value', $error['errorCode']);
            $this->assertEquals(
                'Retries must be zero or greater.',
                $error['message']
            );
        }
    }

    public function testInvalidTimeout(): void
    {
        try {
            new ShipEngineConfig(
                [
                    'apiKey' => 'baz',
                    'baseUrl' => self::$test_url,
                    'pageSize' => 75,
                    'retries' => 7,
                    'timeout' => new DateInterval('PT0S'),
                    'events' => null,
                ]
            );
        } catch (ValidationException $e) {
            $error = $e->jsonSerialize();
            $this->assertInstanceOf(ValidationException::class, $e);
            $this->assertNull($error['requestId']);
            $this->assertEquals('shipengine', $error['source']);
            $this->assertEquals('validation', $error['type']);
            $this->assertEquals('invalid_field_value', $error['errorCode']);
            $this->assertEquals(
                'Timeout must be greater than zero.',
                $error['message']
            );
        }
    }

    public function testMergeApiKey(): void
    {
        $config = new ShipEngineConfig(
            [
                'apiKey' => 'baz',
                'baseUrl' => self::$test_url,
                'pageSize' => 75,
                'retries' => 7,
                'timeout' => new DateInterval('PT15S'),
                'events' => null,
            ]
        );
        $update_config = ['apiKey' => 'foo'];
        $new_config = $config->merge($update_config);
        $this->assertEquals($update_config['apiKey'], $new_config->apiKey);
    }

    public function testMergeBaseUrl(): void
    {
        $config = new ShipEngineConfig(
            [
                'apiKey' => 'baz',
                'baseUrl' => self::$test_url,
                'pageSize' => 75,
                'retries' => 7,
                'timeout' => new DateInterval('PT15S'),
                'events' => null,
            ]
        );
        $update_config = ['baseUrl' => 'https://google.com/'];
        $new_config = $config->merge($update_config);
        $this->assertEquals($update_config['baseUrl'], $new_config->baseUrl);
    }

    public function testMergePageSize(): void
    {
        $config = new ShipEngineConfig(
            [
                'apiKey' => 'baz',
                'baseUrl' => self::$test_url,
                'pageSize' => 75,
                'retries' => 7,
                'timeout' => new DateInterval('PT15S'),
                'events' => null,
            ]
        );
        $update_config = ['pageSize' => 50];
        $new_config = $config->merge($update_config);
        $this->assertEquals($update_config['pageSize'], $new_config->pageSize);
    }

    public function testMergeRetries(): void
    {
        $config = new ShipEngineConfig(
            [
                'apiKey' => 'baz',
                'baseUrl' => self::$test_url,
                'pageSize' => 75,
                'retries' => 7,
                'timeout' => new DateInterval('PT15S'),
                'events' => null,
            ]
        );
        $update_config = ['retries' => 1];
        $new_config = $config->merge($update_config);
        $this->assertEquals($update_config['retries'], $new_config->retries);
    }

    public function testMergeTimeout(): void
    {
        $config = new ShipEngineConfig(
            [
                'apiKey' => 'baz',
                'baseUrl' => self::$test_url,
                'pageSize' => 75,
                'retries' => 7,
                'timeout' => new DateInterval('PT15S'),
                'events' => null,
            ]
        );
        $update_config = ['timeout' => new DateInterval('PT25S')];
        $new_config = $config->merge($update_config);
        $this->assertEquals($update_config['timeout'], $new_config->timeout);
    }

    public function assertionsOn429Exception(ShipEngineException $err, string $errorClass): void
    {
        $error = $err->jsonSerialize();
        $this->assertInstanceOf($errorClass, $err);
        $this->assertNotNull($error['requestId']);
        $this->assertStringStartsWith('req_', $error['requestId']);
        $this->assertEquals(ErrorSource::SHIPENGINE, $error['source']);
        $this->assertEquals(ErrorType::SYSTEM, $error['type']);
        $this->assertEquals(ErrorCode::RATE_LIMIT_EXCEEDED, $error['errorCode']);
        $this->assertEquals(
            'You have exceeded the rate limit.',
            $error['message']
        );
        $this->assertNotNull($error['url']);
        $this->assertEquals('https://www.shipengine.com/docs/rate-limits', $error['url']);
    }

    public function assertionsOnTimeoutException(ShipEngineException $err, int $timeout): void
    {
        $error = $err->jsonSerialize();
        $this->assertInstanceOf(TimeoutException::class, $err);
        $this->assertNotNull($error['requestId']);
        $this->assertStringStartsWith('req_', $error['requestId']);
        $this->assertEquals(ErrorSource::SHIPENGINE, $error['source']);
        $this->assertEquals(ErrorType::SYSTEM, $error['type']);
        $this->assertEquals(ErrorCode::TIMEOUT, $error['errorCode']);
        $this->assertEquals(
            "The request took longer than the $timeout seconds allowed.",
            $error['message']
        );
        $this->assertNotNull($error['url']);
        $this->assertEquals('https://www.shipengine.com/docs/rate-limits', $error['url']);
    }

    public function testJsonSerialize(): void
    {
        $se_config = new ShipEngineConfig(
            [
                'apiKey' => 'baz',
                'baseUrl' => self::$test_url,
                'pageSize' => 75,
                'retries' => 1,
                'timeout' => new DateInterval('PT10S'),
            ]
        );
        $this->assertJson(json_encode($se_config));
    }
}
